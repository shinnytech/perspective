{
  "version": 3,
  "sources": ["../../src/ts/plugin.ts", "../../src/ts/viewer.ts", "../../src/ts/init.ts", "../../src/ts/migrate.ts", "../../src/ts/number-column-style.ts", "../../src/ts/string-column-style.ts", "../../src/ts/copy_menu.ts", "../../src/ts/export_menu.ts", "../../src/ts/perspective-viewer.ts"],
  "sourcesContent": ["/******************************************************************************\n *\n * Copyright (c) 2018, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport type * as perspective from \"@finos/perspective\";\n\n/**\n * The `IPerspectiveViewerPlugin` interface defines the necessary API for a\n * `<perspective-viewer>` plugin, which also must be an `HTMLElement` via the\n * Custom Elements API or otherwise.  Rather than implement this API from\n * scratch however, the simplest way is to inherit from\n * `<perspective-viewer-plugin>`, which implements `IPerspectiveViewerPlugin`\n * with non-offensive default implementations, where only the `draw()` and\n * `name()` methods need be overridden to get started with a simple plugin.\n *\n * Note that plugins are frozen once a `<perspective-viewer>` has been\n * instantiated, so generally new plugin code must be executed at the module\n * level (if packaged as a library), or during application init to ensure global\n * availability of a plugin.\n *\n * @example\n * ```javascript\n * const BasePlugin = customElements.get(\"perspective-viewer-plugin\");\n * class MyPlugin extends BasePlugin {\n *     get name() {\n *         return \"My Plugin\";\n *     }\n *     async draw(view) {\n *         const count = await view.num_rows();\n *         this.innerHTML = `View has ${count} rows`;\n *     }\n * }\n *\n * customElements.define(\"my-plugin\", MyPlugin);\n * const Viewer = customElements.get(\"perspective-viewer\");\n * Viewer.registerPlugin(\"my-plugin\");\n * ```\n * @noInheritDoc\n */\nexport interface IPerspectiveViewerPlugin extends HTMLElement {\n    /**\n     * The name for this plugin, which is used as both it's unique key for use\n     * as a parameter for the `plugin` field of a `ViewerConfig`, and as the\n     * display name for this plugin in the `<perspective-viewer>` UI.\n     */\n    get name(): string;\n\n    /**\n     * Select mode determines how column add/remove buttons behave for this\n     * plugin.  `\"select\"` mode exclusively selects the added column, removing\n     * other columns.  `\"toggle\"` mode toggles the column on or off (dependent\n     * on column state), leaving existing columns alone.\n     */\n    get select_mode(): \"select\" | \"toggle\" | undefined;\n\n    /**\n     * The minimum number of columns required for this plugin to operate.\n     * This mostly affects drag/drop and column remove button behavior,\n     * preventing the use from applying configs which violate this min.\n     *\n     * While this option can technically be `undefined` (as in the case of\n     * `@finos/perspective-viewer-datagrid`), doing so currently has nearly\n     * identical behavior to 1.\n     */\n    get min_config_columns(): number | undefined;\n\n    /**\n     * The named column labels, if desired.  Named columns behave differently\n     * in drag/drop mode than unnamed columns, having replace/swap behavior\n     * rather than insert.  If provided, the length of `config_column_names`\n     * _must_ be `>= min_config_columns`, as this is assumed by the drag/drop\n     * logic.\n     */\n    get config_column_names(): string[] | undefined;\n\n    /**\n     * Render this plugin using the provided `View`.  While there is no\n     * provision to cancel a render in progress per se, calling a method on\n     * a `View` which has been deleted will throw an exception.\n     *\n     * @example\n     * ```\n     * async draw(view: perspective.View): Promise<void> {\n     *     const csv = await view.to_csv();\n     *     this.innerHTML = `<pre>${csv}</pre>`;\n     * }\n     * ```\n     */\n    draw(view: perspective.View): Promise<void>;\n\n    /**\n     * Draw under the assumption that the `ViewConfig` has not changed since\n     * the previous call to `draw()`, but the underlying data has.  Defaults to\n     * dispatch to `draw()`.\n     *\n     * @example\n     * ```javascript\n     * async update(view: perspective.View): Promise<void> {\n     *     return this.draw(view);\n     * }\n     * ```\n     */\n    update(view: perspective.View): Promise<void>;\n\n    /**\n     * Clear this plugin, though it is up to the discretion of the plugin\n     * author to determine what this means.  Defaults to resetting this\n     * element's `innerHTML`, so be sure to override if you want custom\n     * behavior.\n     *\n     * @example\n     * ```javascript\n     * async clear(): Promise<void> {\n     *     this.innerHTML = \"\";\n     * }\n     * ```\n     */\n    clear(): Promise<void>;\n\n    /**\n     * Like `update()`, but for when the dimensions of the plugin have changed\n     * and the underlying data has not.\n     */\n    resize(): Promise<void>;\n\n    /**\n     * Notify the plugin that the style environment has changed.  Useful for\n     * plugins which read CSS styles via `window.getComputedStyle()`.\n     */\n    restyle(): Promise<void>;\n\n    /**\n     * Save this plugin's state to a JSON-serializable value.  While this value\n     * can be anything, it should work reciprocally with `restore()` to return\n     * this plugin's renderer to the same state, though potentially with a\n     * different `View`.\n     *\n     * `save()` should be used for user-persistent settings that are\n     * data-agnostic, so the user can have persistent view during refresh or\n     * reload.  For example, `@finos/perspective-viewer-d3fc` uses\n     * `plugin_config` to remember the user-repositionable legend coordinates.\n     */\n    save(): Promise<any>;\n\n    /**\n     * Restore this plugin to a state previously returned by `save()`.\n     */\n    restore(config: any): Promise<void>;\n\n    /**\n     * Free any resources acquired by this plugin and prepare to be deleted.\n     */\n    delete(): Promise<void>;\n}\n\n/**\n * The `<perspective-viewer-plugin>` element, the default perspective plugin\n * which is registered and activated automcatically when a\n * `<perspective-viewer>` is loaded without plugins.  While you will not\n * typically instantiate this class directly, it is simple enough to function\n * as a good \"default\" plugin implementation which can be extended to create\n * custom plugins.\n *\n * @example\n * ```javascript\n * class MyPlugin extends customElements.get(\"perspective-viewer-plugin\") {\n *    // Custom plugin overrides\n * }\n * ```\n * @noInheritDoc\n */\nexport class HTMLPerspectiveViewerPluginElement\n    extends HTMLElement\n    implements IPerspectiveViewerPlugin\n{\n    constructor() {\n        super();\n    }\n\n    get name(): string {\n        return \"Debug\";\n    }\n\n    get select_mode(): \"select\" | \"toggle\" {\n        return \"select\";\n    }\n\n    get min_config_columns(): number | undefined {\n        return undefined;\n    }\n\n    get config_column_names(): string[] | undefined {\n        return undefined;\n    }\n\n    async update(view: perspective.View): Promise<void> {\n        return this.draw(view);\n    }\n\n    async draw(view: perspective.View): Promise<void> {\n        this.style.backgroundColor = \"#fff\";\n        const csv = await view.to_csv();\n        const css = `margin:0;overflow:scroll;position:absolute;width:100%;height:100%`;\n        this.innerHTML = `<pre style='${css}'>${csv}</pre>`;\n    }\n\n    async clear(): Promise<void> {\n        this.innerHTML = \"\";\n    }\n\n    async resize(): Promise<void> {\n        // Not Implemented\n    }\n\n    async restyle(): Promise<void> {\n        // Not Implemented\n    }\n\n    async save(): Promise<any> {\n        // Not Implemented\n    }\n\n    async restore(): Promise<void> {\n        // Not Implemented\n    }\n\n    async delete(): Promise<void> {\n        // Not Implemented\n    }\n}\n\nif (\n    document.createElement(\"perspective-viewer-plugin\").constructor ===\n    HTMLElement\n) {\n    window.customElements.define(\n        \"perspective-viewer-plugin\",\n        HTMLPerspectiveViewerPluginElement\n    );\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2018, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport type * as perspective from \"@finos/perspective\";\n\nimport {\n    PerspectiveViewerElement,\n    register_plugin,\n    get_exprtk_commands,\n} from \"@finos/perspective-viewer/dist/pkg/perspective_viewer.js\";\n\nimport {WASM_MODULE} from \"./init\";\n\nexport type PerspectiveViewerConfig = perspective.ViewConfig & {\n    plugin?: string;\n    settings?: boolean;\n    plugin_config?: any;\n};\n\n/**\n * The Custom Elements implementation for `<perspective-viewer>`, as well at its\n * API.  `PerspectiveViewerElement` should not be constructed directly (like its\n * parent class `HTMLElement`);  instead, use `document.createElement()` or\n * declare your `<perspective-viewer>` element in HTML.  Once instantiated,\n * `<perspective-viewer>` works just like a standard `HTMLElement`, with a few\n * extra perspective-specific methods.\n *\n * @example\n * ```javascript\n * const viewer = document.createElement(\"perspective-viewer\");\n * ```\n * @example\n * ```javascript\n * document.body.innerHTML = `\n *     <perspective-viewer id=\"viewer\"></perspective-viewer>\n * `;\n * const viewer = document.body.querySelector(\"#viewer\");\n * ```\n * @noInheritDoc\n */\nexport class HTMLPerspectiveViewerElement extends HTMLElement {\n    private instance: PerspectiveViewerElement;\n\n    /**\n     * Should not be called directly (will throw `TypeError: Illegal\n     * constructor`).\n     *\n     * @ignore\n     */\n    constructor() {\n        super();\n        this.load_wasm();\n    }\n\n    private async load_wasm(): Promise<void> {\n        await WASM_MODULE;\n        if (!this.instance) {\n            this.instance = new PerspectiveViewerElement(this);\n        }\n    }\n\n    /**\n     * Part of the Custom Elements API.  This method is called by the browser,\n     * and should not be called directly by applications.\n     *\n     * @ignore\n     */\n    async connectedCallback(): Promise<void> {\n        await this.load_wasm();\n        this.instance.connected_callback();\n    }\n\n    /**\n     * Register a new plugin via its custom element name.  This method is called\n     * automatically as a side effect of importing a plugin module, so this\n     * method should only typically be called by plugin authors.\n     *\n     * @category Plugin\n     * @param name The `name` of the custom element to register, as supplied\n     * to the `customElements.define(name)` method.\n     * @example\n     * ```javascript\n     * customElements.get(\"perspective-viewer\").registerPlugin(\"my-plugin\");\n     * ```\n     */\n    static async registerPlugin(name: string): Promise<void> {\n        await WASM_MODULE;\n        register_plugin(name);\n    }\n\n    /**\n     * Load a `perspective.Table`.  If `load` or `update` have already been\n     * called on this element, its internal `perspective.Table` will _not_ be\n     * deleted, but it will bed de-referenced by this `<perspective-viewer>`.\n     *\n     * @category Data\n     * @param data A `Promise` which resolves to the `perspective.Table`\n     * @returns {Promise<void>} A promise which resolves once the data is\n     * loaded, a `perspective.View` has been created, and the active plugin has\n     * rendered.\n     * @example <caption>Load perspective.table</caption>\n     * ```javascript\n     * const my_viewer = document.getElementById('#my_viewer');\n     * const tbl = perspective.table(\"x,y\\n1,a\\n2,b\");\n     * my_viewer.load(tbl);\n     * ```\n     * @example <caption>Load Promise&lt;perspective.table&gt;</caption>\n     * ```javascript\n     * const my_viewer = document.getElementById('#my_viewer');\n     * const tbl = perspective.table(\"x,y\\n1,a\\n2,b\");\n     * my_viewer.load(tbl);\n     * ```\n     */\n    async load(\n        table: Promise<perspective.Table> | perspective.Table\n    ): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_load(Promise.resolve(table));\n    }\n\n    /**\n     * Redraw this `<perspective-viewer>` and plugin when its dimensions or\n     * visibility has been updated.  By default, `<perspective-viewer>` will\n     * auto-size when its own dimensions change, so this method need not be\n     * called;  when disabled via `setAutoSize(false)` however, this method\n     * _must_ be called, and will not respond to dimension or style changes to\n     * its parent container otherwise.  `notifyResize()` does not recalculate\n     * the current `View`, but all plugins will re-request the data window\n     * (which itself may be smaller or larger due to resize).\n     *\n     * @category Util\n     * @param force Whether to re-render, even if the dimenions have not\n     * changed.  When set to `false` and auto-size is enabled (the defaults),\n     * calling this method will automatically disable auto-size.\n     * @returns A `Promise<void>` which resolves when this resize event has\n     * finished rendering.\n     * @example <caption>Bind `notfyResize()` to browser dimensions</caption>\n     * ```javascript\n     * const viewer = document.querySelector(\"perspective-viewer\");\n     * viewer.setAutoSize(false);\n     * window.addEventListener(\"resize\", () => viewer.notifyResize());\n     * ```\n     */\n    async notifyResize(force = false): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_resize(force);\n    }\n\n    /**\n     * Determines the auto-size behavior.  When `true` (the default), this\n     * element will re-render itself whenever its own dimensions change,\n     * utilizing a `ResizeObserver`;  when `false`, you must explicitly call\n     * `notifyResize()` when the element's dimensions have changed.\n     *\n     * @category Util\n     * @param autosize Whether to re-render when this element's dimensions\n     * change.\n     * @example <caption>Disable auto-size</caption>\n     * ```javascript\n     * await viewer.setAutoSize(false);\n     * ```\n     */\n    async setAutoSize(autosize = true): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_set_auto_size(autosize);\n    }\n\n    /**\n     * Returns the `perspective.Table()` which was supplied to `load()`\n     *\n     * @category Data\n     * @param wait_for_table Whether to await `load()` if it has not yet been\n     * invoked, or fail immediately.\n     * @returns A `Promise` which resolves to a `perspective.Table`\n     * @example <caption>Share a `Table`</caption>\n     * ```javascript\n     * const viewers = document.querySelectorAll(\"perspective-viewer\");\n     * const [viewer1, viewer2] = Array.from(viewers);\n     * const table = await viewer1.getTable();\n     * await viewer2.load(table);\n     * ```\n     */\n    async getTable(wait_for_table?: boolean): Promise<perspective.Table> {\n        await this.load_wasm();\n        const table = await this.instance.js_get_table(!!wait_for_table);\n        return table;\n    }\n\n    /**\n     * Returns the underlying `perspective.View` currently configured for this\n     * `<perspective-viewer>`.  Because ownership of the `perspective.View` is\n     * mainainted by the `<perspective-viewer>` it was created by, this `View`\n     * may become deleted (invalidated by calling `delete()`) at any time -\n     * specifically, it will be deleted whenever the `PerspectiveViewConfig`\n     * changes.  Because of this, when using this API, prefer calling\n     * `getView()` repeatedly over caching the returned `perspective.View`,\n     * especially in `async` contexts.\n     *\n     * @category Data\n     * @returns A `Promise` which ressolves to a `perspective.View`.\n     * @example <caption>Collapse grid to root</caption>\n     * ```javascript\n     * const viewer = document.querySelector(\"perspective-viewer\");\n     * const view = await viewer.getView();\n     * await view.set_depth(0);\n     * ```\n     */\n    async getView(): Promise<perspective.View> {\n        await this.load_wasm();\n        const view = await this.instance.js_get_view();\n        return view;\n    }\n\n    /**\n     * Restore this element to a state as generated by a reciprocal call to\n     * `save`.  In `json` (default) format, `PerspectiveViewerConfig`'s fields\n     * have specific semantics:\n     *\n     *  - When a key is missing, this field is ignored;  `<perspective-viewer>`\n     *    will maintain whatever settings for this field is currently applied.\n     *  - When the key is supplied, but the value is `undefined`, the field is\n     *    reset to its default value for this current `View`, i.e. the state it\n     *    would be in after `load()` resolves.\n     *  - When the key is defined to a value, the value is applied for this\n     *    field.\n     *\n     * This behavior is convenient for explicitly controlling current vs desired\n     * UI state in a single request, but it does make it a bit inconvenient to\n     * use `restore()` to reset a `<perspective-viewer>` to default as you must\n     * do so explicitly for each key;  for this case, use `reset()` instead of\n     * restore.\n     *\n     * As noted in `save()`, this configuration state does not include the\n     * `Table` or its `Schema`.  In order for `restore()` to work correctly, it\n     * must be called on a `<perspective-viewer>` that has a `Table already\n     * `load()`-ed, with the same (or a type-compatible superset) `Schema`.\n     * It does not need have the same rows, or even be populated.\n     *\n     * @category Persistence\n     * @param config returned by `save()`.  This can be any format returned by\n     * `save()`; the specific deserialization is chosen by `typeof config`.\n     * @returns A promise which resolves when the changes have been applied and\n     * rendered.\n     * @example <caption>Restore a viewer from `localStorage`</caption>\n     * ```javascript\n     * const viewer = document.querySelector(\"perspective-viewer\");\n     * const token = localStorage.getItem(\"viewer_state\");\n     * await viewer.restore(token);\n     * ```\n     */\n    async restore(\n        config: PerspectiveViewerConfig | string | ArrayBuffer\n    ): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_restore(config);\n    }\n\n    /**\n     * Serialize this element's attribute/interaction state, but _not_ the\n     * `perspective.Table` or its `Schema`.  `save()` is designed to be used in\n     * conjunction with `restore()` to persist user settings and bookmarks, but\n     * the `PerspectiveViewerConfig` object returned in `json` format can also\n     * be written by hand quite easily, which is useful for authoring\n     * pre-conceived configs.\n     *\n     * @category Persistence\n     * @param format The serialization format - `json` (JavaScript object),\n     * `arraybuffer` or `string`.  `restore()` uses the returned config's type\n     * to infer format.\n     * @returns a serialized element in the chosen format.\n     * @example <caption>Save a viewer to `localStorage`</caption>\n     * ```javascript\n     * const viewer = document.querySelector(\"perspective-viewer\");\n     * const token = await viewer.save(\"string\");\n     * localStorage.setItem(\"viewer_state\", token);\n     * ```\n     */\n    async save(): Promise<PerspectiveViewerConfig>;\n    async save(format: \"json\"): Promise<PerspectiveViewerConfig>;\n    async save(format: \"arraybuffer\"): Promise<ArrayBuffer>;\n    async save(format: \"string\"): Promise<string>;\n    async save(\n        format?: \"json\" | \"arraybuffer\" | \"string\"\n    ): Promise<PerspectiveViewerConfig | string | ArrayBuffer> {\n        await this.load_wasm();\n        const config = await this.instance.js_save(format);\n        return config;\n    }\n\n    /**\n     * Flush any pending modifications to this `<perspective-viewer>`.  Since\n     * `<perspective-viewer>`'s API is almost entirely `async`, it may take\n     * some milliseconds before any method call such as `restore()` affects\n     * the rendered element.  If you want to make sure any invoked method which\n     * affects the rendered has had its results rendered, call and await\n     * `flush()`\n     *\n     * @category Util\n     * @returns {Promise<void>} A promise which resolves when the current\n     * pending state changes have been applied and rendered.\n     * @example <caption>Flush an unawaited `restore()`</caption>\n     * ```javascript\n     * const viewer = document.querySelector(\"perspective-viewer\");\n     * viewer.restore({group_by: [\"State\"]});\n     * await viewer.flush();\n     * console.log(\"Viewer has been rendered with a pivot!\");\n     * ```\n     */\n    async flush(): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_flush();\n    }\n\n    /**\n     * Reset's this element's view state and attributes to default.  Does not\n     * delete this element's `perspective.table` or otherwise modify the data\n     * state.\n     *\n     * @category Persistence\n     * @param all Should `expressions` param be reset as well, defaults to\n     * @example\n     * ```javascript\n     * const viewer = document.querySelector(\"perspective-viewer\");\n     * await viewer.reset();\n     * ```\n     */\n    async reset(all = false): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_reset(all);\n    }\n\n    /**\n     * Deletes this element and clears it's internal state (but not its\n     * user state).  This (or the underlying `perspective.view`'s equivalent\n     * method) must be called in order for its memory to be reclaimed, as well\n     * as the reciprocal method on the `perspective.table` which this viewer is\n     * bound to.\n     *\n     * @category Util\n     */\n    async delete(): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_delete();\n    }\n\n    /**\n     * Download this element's data as a CSV file.\n     *\n     * @category UI Action\n     * @param flat Whether to use the element's current view\n     * config, or to use a default \"flat\" view.\n     */\n    async download(flat: boolean): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_download(flat);\n    }\n\n    /**\n     * Copies this element's view data (as a CSV) to the clipboard.  This method\n     * must be called from an event handler, subject to the browser's\n     * restrictions on clipboard access.  See\n     * {@link https://www.w3.org/TR/clipboard-apis/#allow-read-clipboard}.\n     *\n     * @category UI Action\n     * @param flat Whether to use the element's current view\n     * config, or to use a default \"flat\" view.\n     * @example\n     * ```javascript\n     * const viewer = document.querySelector(\"perspective-viewer\");\n     * const button = document.querySelector(\"button\");\n     * button.addEventListener(\"click\", async () => {\n     *     await viewer.copy();\n     * });\n     * ```\n     */\n    async copy(flat: boolean): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_copy(flat);\n    }\n\n    /**\n     * Restyles the elements and to pick up any style changes.  While most of\n     * perspective styling is plain CSS and can be updated at any time, some\n     * CSS rules are read and cached, e.g. the series colors for\n     * `@finos/perspective-viewer-d3fc` which are read from CSS then reapplied\n     * as SVG and Canvas attributes.\n     *\n     * @category Util\n     */\n    async restyleElement(): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_restyle_element();\n    }\n\n    /**\n     * Sets the theme names available via the `<perspective-viewer>` status bar\n     * UI.  Typically these will be auto-detected simply by including the\n     * theme `.css` in a `<link>` tag;  however, auto-detection can fail if\n     * the `<link>` tag is not a same-origin request due to CORS.  For servers\n     * configured to allow cross-origin requests, you can use the\n     * [`crossorigin` attribute](https://html.spec.whatwg.org/multipage/semantics.html#attr-link-crossorigin)\n     * to enable detection, e.g. `<link crossorigin=\"anonymous\" .. >`.  If for\n     * whatever reason auto-detection still fails, you may set the themes via\n     * this method.  Note the theme `.css` must still be loaded in this case -\n     * the `resetThemes()` method only lets the `<perspective-viewer>` know what\n     * theme names are available.\n     *\n     * @category Util\n     * @param themes A list of theme names to use, or auto-detect from\n     * document's stylesheets if `undefined`.\n     * @example\n     * ```javascript\n     * const viewer = document.querySelector(\"perspective-viewer\");\n     * await viewer.resetThemes([\"Material Light\", \"Material Dark\"]);\n     * ```\n     */\n    async resetThemes(themes?: Array<string>): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_reset_themes(themes);\n    }\n\n    /**\n     * Gets the edit port, the port number for which `Table` updates from this\n     * `<perspective-viewer>` are generated.  This port number will be present\n     * in the options object for a `View.on_update()` callback for any update\n     * which was originated by the `<perspective-viewer>`/user, which can be\n     * used to distinguish server-originated updates from user edits.\n     *\n     * @category Util\n     * @returns A promise which resolves to the current edit port.\n     * @example\n     * ```javascript\n     * const viewer = document.querySelector(\"perspective-viewer\");\n     * const editport = await viewer.getEditPort();\n     * const table = await viewer.getTable();\n     * const view = await table.view();\n     * view.on_update(obj => {\n     *     if (obj.port_id = editport) {\n     *         console.log(\"User edit detected\");\n     *     }\n     * });\n     * ```\n     */\n    async getEditPort(): Promise<number> {\n        await this.load_wasm();\n        const port = await this.instance.js_get_edit_port();\n        return port;\n    }\n\n    /**\n     * Determines the render throttling behavior. Can be an integer, for\n     * millisecond window to throttle render event; or, if `undefined`,\n     * will try to determine the optimal throttle time from this component's\n     * render framerate.\n     *\n     * @category Util\n     * @param value an optional throttle rate in milliseconds (integer).  If not\n     * supplied, adaptive throttling is calculated from the average plugin\n     * render time.\n     * @example <caption>Limit FPS to 1 frame per second</caption>\n     * ```javascript\n     * await viewer.setThrottle(1000);\n     * ```\n     */\n    async setThrottle(value?: number): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_set_throttle(value);\n    }\n\n    /**\n     * Opens/closes the element's config menu, equivalent to clicking the\n     * settings button in the UI.  This method is equivalent to\n     * `viewer.restore({settings: force})` when `force` is present, but\n     * `restore()` cannot toggle as `toggleConfig()` can, you would need to\n     * first read the settings state from `save()` otherwise.\n     *\n     * Calling `toggleConfig()` may be delayed if an async render is currently\n     * in process, and it may only partially render the UI if `load()` has not\n     * yet resolved.\n     *\n     * @category UI Action\n     * @param force If supplied, explicitly set the config state to \"open\"\n     * (`true`) or \"closed\" (`false`).\n     * @example\n     * ```javascript\n     * await viewer.toggleConfig();\n     * ```\n     */\n    async toggleConfig(force?: boolean): Promise<void> {\n        await this.load_wasm();\n        await this.instance.js_toggle_config(force);\n    }\n\n    /**\n     * Get the currently active plugin custom element instance, or a specific\n     * named instance if requested.  `getPlugin(name)` does not activate the\n     * plugin requested, so if this plugin is not active the returned\n     * `HTMLElement` will not have a `parentElement`.\n     *\n     * If no plugins have been registered (via `registerPlugin()`), calling\n     * `getPlugin()` will cause `perspective-viewer-plugin` to be registered as\n     * a side effect.\n     *\n     * @category Plugin\n     * @param name Optionally a specific plugin name, defaulting to the current\n     * active plugin.\n     * @returns The active or requested plugin instance.\n     */\n    async getPlugin(name?: string): Promise<HTMLElement> {\n        await this.load_wasm();\n        const plugin = await this.instance.js_get_plugin(name);\n        return plugin;\n    }\n\n    /**\n     * Get all plugin custom element instances, in order of registration.\n     *\n     * If no plugins have been registered (via `registerPlugin()`), calling\n     * `getAllPlugins()` will cause `perspective-viewer-plugin` to be registered\n     * as a side effect.\n     *\n     * @category Plugin\n     * @returns An `Array` of the plugin instances for this\n     * `<perspective-viewer>`.\n     */\n    async getAllPlugins(): Promise<Array<HTMLElement>> {\n        await this.load_wasm();\n        const plugins = await this.instance.js_get_all_plugins();\n        return plugins;\n    }\n\n    /**\n     * Get the raw pointer to this `<perspective-viewer>` WASM model, such that\n     * it may be passed back to WASM function calls that take a\n     * `PerspectiveViewerElement` as an argument.\n     *\n     * @category Internal\n     * @returns A pointer to this model\n     */\n    async unsafe_get_model(): Promise<number> {\n        await this.load_wasm();\n        return await this.instance.js_unsafe_get_model();\n    }\n\n    /**\n     * Get metadata for ExprTK's supported commands.\n     *\n     * @category Internal\n     * @returns An array of JSON descriptors for ExprTK commands\n     */\n    static async getExprtkCommands(): Promise<Array<Record<string, string>>> {\n        await WASM_MODULE;\n        return get_exprtk_commands();\n    }\n}\n\nif (document.createElement(\"perspective-viewer\").constructor === HTMLElement) {\n    window.customElements.define(\n        \"perspective-viewer\",\n        HTMLPerspectiveViewerElement\n    );\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2018, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport {Decompress} from \"fflate\";\n\nimport init_wasm from \"@finos/perspective-viewer/dist/pkg/perspective_viewer.js\";\nimport wasm from \"@finos/perspective-viewer/dist/pkg/perspective_viewer_bg.wasm\";\n\n// There is no way to provide a default rejection handler within a promise and\n// also not lock the await-er, so this module attaches a global handler to\n// filter out cancelled query messages.\nwindow.addEventListener(\"unhandledrejection\", (event) => {\n    if (event.reason?.message === \"View method cancelled\") {\n        event.preventDefault();\n    }\n});\n\nfunction is_gzip(buffer) {\n    return new Uint32Array(buffer.slice(0, 4))[0] == 559903;\n}\n\nasync function load_wasm() {\n    // Perform a silly dance to deal with the different ways webpack and esbuild\n    // load binary\n    const compressed = (await wasm) as unknown;\n\n    let parts = [];\n    let length = 0;\n    const decompressor = new Decompress((chunk) => {\n        if (chunk) {\n            length += chunk.byteLength;\n            parts.push(chunk);\n        }\n    });\n\n    if (compressed instanceof URL || typeof compressed === \"string\") {\n        const resp = await fetch(compressed.toString());\n        const reader = resp.body.getReader();\n        let state = 0;\n        while (true) {\n            const {value, done} = await reader.read();\n            if (done) break;\n            if ((state === 0 && is_gzip(value.buffer)) || state === 1) {\n                state = 1;\n                decompressor.push(value, done);\n            } else {\n                state = 2;\n                length += value.byteLength;\n                parts.push(value);\n            }\n        }\n    } else if (compressed instanceof Uint8Array) {\n        if (is_gzip(compressed.buffer)) {\n            decompressor.push(compressed, true);\n        } else {\n            length = compressed.byteLength;\n            parts = [compressed];\n        }\n    } else {\n        const array = new Uint8Array(compressed as ArrayBuffer);\n        if (is_gzip(compressed)) {\n            decompressor.push(array, true);\n        } else {\n            length = array.byteLength;\n            parts = [array];\n        }\n    }\n\n    let offset = 0;\n    const buffer = new Uint8Array(length);\n    for (const part of parts) {\n        buffer.set(part, offset);\n        offset += part.byteLength;\n    }\n\n    return await init_wasm(buffer);\n}\n\nexport const WASM_MODULE = load_wasm();\n", "/******************************************************************************\n *\n * Copyright (c) 2017, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms of\n * the Apache License 2.0.  The full license can be found in the LICENSE file.\n *\n */\n\n/**\n * A migration utility for `@finos/perspective-viewer` and\n * `@finos/perspective-workspace` persisted state objects.  If you have an\n * application which persists tokens returned by the `.save()` method of a\n * Perspective Custom Element, and you want to upgrade Perspective to the latest\n * version, this module is for you!  You know who you are!\n *\n * Say you have a `<perspective-viewer>` Custom Element from\n * `@finos/perspective-viewer>=0.8.3`, and have persisted an arbitrary persistence\n * token object:\n *\n * ```javascript\n * const old_elem = document.querySelector(\"perspective-viewer\");\n * const old_token = await old_elem.save();\n * ```\n *\n * To migrate this token to the version of `@finos/perspective-migrate` itself:\n *\n * ```javascript\n * import {convert} from \"@finos/perspective-viewer`;\n *\n * // ...\n *\n * const new_elem = document.querySelector(\"perspective-viewer\");\n * const new_token = convert(old_token);\n * await new_elem.restore(new_token);\n * ```\n *\n * `convert` can also be imported in node for converting persisted tokens\n * outside the browser.\n *\n * ```javascript\n * const {convert} = require(\"@finos/perspective-viewer/dist/cjs/migrate.js\");\n * ```\n * @param old the layout to convert, in `<perspective-viewer>` or\n * `<perspective-workspace>` format.\n * @param options a `PerspectiveConvertOptions` object specifying the convert\n * options for this call.\n * @returns a layout for either `<perspective-viewer>` or\n * `<perspective-workspace>`, updated to the perspective version of this\n * script's package.\n */\nexport function convert(\n    old: Record<string, unknown> | ArrayBuffer | string,\n    {warn = true, replace_defaults = false}: PerspectiveConvertOptions = {}\n): Record<string, unknown> | ArrayBuffer | string {\n    if (typeof old === \"object\" && !(old instanceof ArrayBuffer)) {\n        const copy = JSON.parse(JSON.stringify(old));\n        if (\"viewers\" in copy && \"detail\" in copy) {\n            return migrate_workspace(copy, {warn, replace_defaults});\n        } else {\n            return migrate_viewer(copy, false, {warn, replace_defaults});\n        }\n    } else {\n        return old;\n    }\n}\n\ntype PerspectiveConvertOptions = {\n    warn?: boolean;\n    replace_defaults?: boolean;\n};\n\n/**\n * Migrate a layout for `<perspective-workspace>`\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_workspace(old, options) {\n    for (const key in old.viewers) {\n        old.viewers[key] = migrate_viewer(old.viewers[key], true, options);\n        if (!(\"master\" in old.viewers[key])) {\n            old.viewers[key].master = false;\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective missing attribute \"master\" set to default`\n                );\n            }\n        }\n\n        if (!(\"linked\" in old.viewers[key])) {\n            old.viewers[key].linked = false;\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective missing attribute \"linked\" set to default`\n                );\n            }\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate a layout for `<perspective-viewer>`\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_viewer(old, omit_attributes, options) {\n    return chain(\n        old,\n        [\n            migrate_group_by,\n            migrate_split_by,\n            migrate_filters,\n            migrate_expressions,\n            options.replace_defaults ? migrate_nulls : false,\n            migrate_plugins,\n            migrate_plugin_config,\n            omit_attributes\n                ? migrate_attributes_workspace\n                : migrate_attributes_viewer,\n        ].filter((x) => !!x),\n        options\n    );\n}\n\n/**\n * Chains functions of `args` and apply to `old`\n * @param old\n * @param args\n * @param options\n * @returns\n */\nfunction chain(old, args, options) {\n    for (const arg of args) {\n        old = arg(old, options);\n    }\n\n    return old;\n}\n\n/**\n * Replace `null` properties with defaults.  This is not strictly behavioral,\n * as new `<perspective-viewer>` treats `null` as an explicit \"reset to default\"\n * instruction.  However, it may be necessary to ensure that `.save()` returns\n * identical results to `convert()`, which may be desirable when migrating a\n * database of layouts.\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_nulls(old, options) {\n    for (const key of [\"group_by\", \"split_by\", \"filter\", \"sort\"]) {\n        if (old[key] === null) {\n            old[key] = [];\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective missing attribute \"${key}\" set to default\"`\n                );\n            }\n        }\n\n        if (\"aggregates\" in old && old.aggregates === null) {\n            old.aggregates = {};\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective missing attribute \"aggregates\" set to default\"`\n                );\n            }\n        }\n    }\n\n    return old;\n}\n\n/**\n * Helper for alias-replacement migrations\n * @param original\n * @param aliases\n * @returns\n */\nfunction _migrate_field_aliases(original, aliases) {\n    return function (old, options) {\n        let count = 0;\n        for (const pivot of aliases) {\n            if (pivot in old) {\n                if (count++ > 0) {\n                    throw new Error(`Duplicate \"${original}\" fields`);\n                }\n\n                old[original] = old[pivot];\n                if (pivot !== original) {\n                    delete old[pivot];\n                    if (options.warn) {\n                        console.warn(\n                            `Deprecated perspective attribute \"${pivot}\" renamed \"${original}\"`\n                        );\n                    }\n                }\n            }\n        }\n\n        return old;\n    };\n}\n\n/**\n * Migrate `group_by` field aliases\n */\nconst migrate_group_by = _migrate_field_aliases(\"group_by\", [\n    \"group_by\",\n    \"row_pivots\",\n    \"row-pivot\",\n    \"row-pivots\",\n    \"row_pivot\",\n]);\n\n/**\n * Migrate `split_by` field aliases\n */\nconst migrate_split_by = _migrate_field_aliases(\"split_by\", [\n    \"split_by\",\n    \"column_pivots\",\n    \"column-pivot\",\n    \"column-pivots\",\n    \"column_pivot\",\n    \"col_pivots\",\n    \"col-pivot\",\n    \"col-pivots\",\n    \"col_pivot\",\n]);\n\n/**\n * Migrate `filters` field aliases\n */\nconst migrate_filters = _migrate_field_aliases(\"filter\", [\"filter\", \"filters\"]);\n\n/**\n * Migrate the old `computed-columns` format expressions to ExprTK\n * @param regex1\n * @param rep\n * @param expression\n * @param old\n * @param options\n * @returns\n */\nfunction _migrate_expression(regex1, rep, expression, old, options) {\n    if (regex1.test(expression)) {\n        const replaced = expression.replace(regex1, rep);\n        if (options.warn) {\n            console.warn(\n                `Deprecated perspective \"expression\" attribute value \"${expression}\" updated to \"${replaced}\"`\n            );\n        }\n\n        for (const key of [\"group_by\", \"split_by\"]) {\n            if (key in old) {\n                for (const idx in old[key]) {\n                    const pivot = old[key][idx];\n                    if (pivot === expression.replace(/\"/g, \"\")) {\n                        old[key][idx] = replaced;\n                        if (options.warn) {\n                            console.warn(\n                                `Deprecated perspective expression in \"${key}\" attribute \"${expression}\" replaced with \"${replaced}\"`\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        for (const filter of old.filter || []) {\n            if (filter[0] === expression.replace(/\"/g, \"\")) {\n                filter[0] = replaced;\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective expression in \"filter\" attribute \"${expression}\" replaced with \"${replaced}\"`\n                    );\n                }\n            }\n        }\n\n        for (const sort of old.sort || []) {\n            if (sort[0] === expression.replace(/\"/g, \"\")) {\n                sort[0] = replaced;\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective expression in \"sort\" attribute \"${expression}\" replaced with \"${replaced}\"`\n                    );\n                }\n            }\n        }\n\n        return replaced;\n    } else {\n        return expression;\n    }\n}\n\n/**\n * Migrate `expressions` field from `computed-columns`\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_expressions(old, options) {\n    if (old[\"computed-columns\"]) {\n        if (\"expressions\" in old) {\n            throw new Error(`Duplicate \"expressions\" and \"computed-columns`);\n        }\n\n        old.expressions = old[\"computed-columns\"];\n        delete old[\"computed-columns\"];\n        if (options.warn) {\n            console.warn(\n                `Deprecated perspective attribute \"computed-columns\" renamed \"expressions\"`\n            );\n        }\n\n        const REPLACEMENTS = [\n            [/^year_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 'y')`],\n            [/^month_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 'M')`],\n            [/^day_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 'd')`],\n            [/^hour_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 'h')`],\n            [/^minute_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 'm')`],\n            [/^second_bucket\\(\"(.+?)\"\\)/, `bucket(\"$1\", 's')`],\n        ];\n\n        for (const idx in old.expressions) {\n            let expression = old.expressions[idx];\n            for (const [a, b] of REPLACEMENTS) {\n                expression = _migrate_expression(\n                    a,\n                    b,\n                    expression,\n                    old,\n                    options\n                );\n            }\n\n            old.expressions[idx] = expression;\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate the `plugin` field\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_plugins(old, options) {\n    const ALIASES = {\n        datagrid: \"Datagrid\",\n        Datagrid: \"Datagrid\",\n        d3_y_area: \"Y Area\",\n        \"Y Area\": \"Y Area\",\n        d3_y_line: \"Y Line\",\n        \"Y Line\": \"Y Line\",\n        d3_xy_line: \"X/Y Line\",\n        \"X/Y Line\": \"X/Y Line\",\n        d3_y_scatter: \"Y Scatter\",\n        \"Y Scatter\": \"Y Scatter\",\n        d3_xy_scatter: \"X/Y Scatter\",\n        \"X/Y Scatter\": \"X/Y Scatter\",\n        d3_x_bar: \"X Bar\",\n        \"X Bar\": \"X Bar\",\n        d3_y_bar: \"Y Bar\",\n        \"Y Bar\": \"Y Bar\",\n        d3_heatmap: \"Heatmap\",\n        Heatmap: \"Heatmap\",\n        d3_treemap: \"Treemap\",\n        Treemap: \"Treemap\",\n        d3_sunburst: \"Sunburst\",\n        Sunburst: \"Sunburst\",\n    };\n\n    if (\"plugin\" in old && old.plugin !== ALIASES[old.plugin]) {\n        old.plugin = ALIASES[old.plugin];\n        if (options.warn) {\n            console.warn(\n                `Deprecated perspective \"plugin\" attribute value \"${\n                    old.plugin\n                }\" updated to \"${ALIASES[old.plugin]}\"`\n            );\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate the `plugin_config` field\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_plugin_config(old, options) {\n    if (old.plugin === \"Datagrid\" && !!old.plugin_config) {\n        if (!old.plugin_config.columns) {\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective attribute \"plugin_config\" moved to \"plugin_config.columns\"`\n                );\n            }\n\n            const columns = {};\n            for (const name of Object.keys(old.plugin_config)) {\n                const column = old.plugin_config[name];\n                delete old.plugin_config[name];\n\n                if (typeof column.color_mode === \"string\") {\n                    if (column.color_mode === \"foreground\") {\n                        column.number_fg_mode = \"color\";\n                    } else if (column.color_mode === \"bar\") {\n                        column.number_fg_mode = \"bar\";\n                    } else if (column.color_mode === \"background\") {\n                        column.number_bg_mode = \"color\";\n                    } else if (column.color_mode === \"gradient\") {\n                        column.number_bg_mode = \"gradient\";\n                    } else {\n                        console.warn(`Unknown color_mode ${column.color_mode}`);\n                    }\n\n                    // column.number_color_mode = column.color_mode;\n                    delete column[\"color_mode\"];\n\n                    if (options.warn) {\n                        console.warn(\n                            `Deprecated perspective attribute \"color_mode\" renamed \"number_bg_mode\"`\n                        );\n                    }\n                }\n\n                columns[name] = column;\n            }\n\n            old.plugin_config.columns = columns;\n            if (options.replace_defaults) {\n                old.plugin_config.editable = false;\n                old.plugin_config.scroll_lock = true;\n            }\n        }\n\n        // Post 1.5, number columns have been split between `fg` and `bg`\n        // style param contexts.\n        for (const name of Object.keys(old.plugin_config.columns)) {\n            const column = old.plugin_config.columns[name];\n\n            if (typeof column.number_color_mode === \"string\") {\n                if (column.number_color_mode === \"foreground\") {\n                    column.number_fg_mode = \"color\";\n                } else if (column.number_color_mode === \"bar\") {\n                    column.number_fg_mode = \"bar\";\n                } else if (column.number_color_mode === \"background\") {\n                    column.number_bg_mode = \"color\";\n                } else if (column.number_color_mode === \"gradient\") {\n                    column.number_bg_mode = \"gradient\";\n                }\n\n                delete column[\"number_color_mode\"];\n\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective attribute \"number_color_mode\" renamed \"number_bg_mode\"`\n                    );\n                }\n            }\n\n            if (column.gradient !== undefined) {\n                if (column.number_bg_mode === \"gradient\") {\n                    column.bg_gradient = column.gradient;\n                } else if (column.number_fg_mode === \"bar\") {\n                    column.fg_gradient = column.gradient;\n                }\n\n                delete column[\"gradient\"];\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective attribute \"gradient\" renamed \"bg_gradient\"`\n                    );\n                }\n            }\n\n            if (column.pos_color !== undefined) {\n                if (column.number_bg_mode !== undefined) {\n                    column.pos_bg_color = column.pos_color;\n                } else if (column.number_fg_mode !== undefined) {\n                    column.pos_fg_color = column.pos_color;\n                }\n\n                delete column[\"pos_color\"];\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective attribute \"pos_color\" renamed \"pos_bg_color\"`\n                    );\n                }\n            }\n\n            if (column.neg_color !== undefined) {\n                if (column.number_bg_mode !== undefined) {\n                    column.neg_bg_color = column.neg_color;\n                } else if (column.number_fg_mode !== undefined) {\n                    column.neg_fg_color = column.neg_color;\n                }\n\n                delete column[\"neg_color\"];\n                if (options.warn) {\n                    console.warn(\n                        `Deprecated perspective attribute \"neg_color\" renamed \"neg_bg_color\"`\n                    );\n                }\n            }\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate attributes which were once persisted but are now considered errors\n * in `<perspective-viewer>` and should only be set in HTML\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_attributes_viewer(old, options) {\n    const ATTRIBUTES = [\n        \"editable\",\n        \"selectable\",\n        \"name\",\n        \"table\",\n        \"master\",\n        \"linked\",\n    ];\n    for (const attr of ATTRIBUTES) {\n        if (attr in old) {\n            delete old[attr];\n\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective attribute \"${attr}\" removed`\n                );\n            }\n        }\n    }\n\n    return old;\n}\n\n/**\n * Migrate attributes which were once persisted but are now considered errors\n * in `<perspective-workspace>` and should only be set in HTML\n * @param old\n * @param options\n * @returns\n */\nfunction migrate_attributes_workspace(old, options) {\n    const ATTRIBUTES = [\n        \"editable\",\n        \"selectable\",\n        \"name\",\n        \"table\",\n        \"master\",\n        \"linked\",\n    ];\n    for (const attr of ATTRIBUTES) {\n        if (attr in old && old[attr] === null) {\n            delete old[attr];\n\n            if (options.warn) {\n                console.warn(\n                    `Deprecated perspective attribute \"${attr}\" removed`\n                );\n            }\n        }\n    }\n\n    return old;\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2018, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport {PerspectiveNumberColumnStyleElement} from \"@finos/perspective-viewer/dist/pkg/perspective_viewer.js\";\n\nclass HTMLPerspectiveColumnStyleElement extends HTMLElement {\n    private instance: PerspectiveNumberColumnStyleElement;\n\n    constructor() {\n        super();\n    }\n\n    async open(\n        target: HTMLElement,\n        config: any,\n        default_config: any\n    ): Promise<void> {\n        if (this.instance) {\n            this.instance.reset(config, default_config);\n        } else {\n            this.instance = new PerspectiveNumberColumnStyleElement(\n                this,\n                config,\n                default_config\n            );\n        }\n\n        this.instance.open(target);\n    }\n\n    destroy() {\n        this.instance.destroy();\n    }\n}\n\nif (\n    document.createElement(\"perspective-number-column-style\").constructor ===\n    HTMLElement\n) {\n    window.customElements.define(\n        \"perspective-number-column-style\",\n        HTMLPerspectiveColumnStyleElement\n    );\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2018, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport {PerspectiveStringColumnStyleElement} from \"@finos/perspective-viewer/dist/pkg/perspective_viewer.js\";\n\nclass HTMLPerspectiveColumnStyleElement extends HTMLElement {\n    private instance: PerspectiveStringColumnStyleElement;\n\n    constructor() {\n        super();\n    }\n\n    async open(\n        target: HTMLElement,\n        config: any,\n        default_config: any\n    ): Promise<void> {\n        if (this.instance) {\n            this.instance.reset(config);\n        } else {\n            this.instance = new PerspectiveStringColumnStyleElement(\n                this,\n                config,\n                default_config\n            );\n        }\n\n        this.instance.open(target);\n    }\n\n    destroy() {\n        this.instance.destroy();\n    }\n}\n\nif (\n    document.createElement(\"perspective-string-column-style\").constructor ===\n    HTMLElement\n) {\n    window.customElements.define(\n        \"perspective-string-column-style\",\n        HTMLPerspectiveColumnStyleElement\n    );\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2018, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport {ExportDropDownMenuElement} from \"@finos/perspective-viewer/dist/pkg/perspective_viewer.js\";\n\nclass HTMLPerspectiveExportDropDownMenuElement extends HTMLElement {\n    private instance: ExportDropDownMenuElement;\n\n    constructor() {\n        super();\n        this.instance = new ExportDropDownMenuElement(this);\n    }\n\n    open(target: HTMLElement) {\n        this.instance.open(target);\n    }\n\n    // destroy() {\n    //     this.instance.destroy();\n    // }\n\n    unsafe_set_model(ptr: number) {\n        this.instance.unsafe_set_model(ptr);\n    }\n}\n\nif (\n    document.createElement(\"perspective-export-menu\").constructor ===\n    HTMLElement\n) {\n    window.customElements.define(\n        \"perspective-export-menu\",\n        HTMLPerspectiveExportDropDownMenuElement\n    );\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2018, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\nimport {CopyDropDownMenuElement} from \"@finos/perspective-viewer/dist/pkg/perspective_viewer.js\";\n\nclass HTMLPerspectiveCopyDropDownMenuElement extends HTMLElement {\n    private instance: CopyDropDownMenuElement;\n\n    constructor() {\n        super();\n        this.instance = new CopyDropDownMenuElement(this);\n    }\n\n    open(target: HTMLElement) {\n        this.instance.open(target);\n    }\n\n    // destroy() {\n    //     this.instance.destroy();\n    // }\n\n    unsafe_set_model(ptr: number) {\n        this.instance.unsafe_set_model(ptr);\n    }\n}\n\nif (\n    document.createElement(\"perspective-copy-menu\").constructor === HTMLElement\n) {\n    window.customElements.define(\n        \"perspective-copy-menu\",\n        HTMLPerspectiveCopyDropDownMenuElement\n    );\n}\n", "/******************************************************************************\n *\n * Copyright (c) 2018, the Perspective Authors.\n *\n * This file is part of the Perspective library, distributed under the terms\n * of the Apache License 2.0.  The full license can be found in the LICENSE\n * file.\n *\n */\n\n/**\n * Module for the `<perspective-viewer>` custom element.  This module has no\n * (real) exports, but importing it has a side effect: the\n * `PerspectiveViewerElement`class is registered as a custom element, after\n * which it can be used as a standard DOM element.\n *\n * Though `<perspective-viewer>` is written mostly in Rust, the nature\n * of WebAssembly's compilation makes it a dynamic module;  in order to\n * guarantee that the Custom Elements extension methods are registered\n * synchronously with this package's import, we need perform said registration\n * within this wrapper module.  As a result, the API methods of the Custom\n * Elements are all `async` (as they must await the wasm module instance).\n *\n * The documentation in this module defines the instance structure of a\n * `<perspective-viewer>` DOM object instantiated typically, through HTML or any\n * relevent DOM method e.g. `document.createElement(\"perspective-viewer\")` or\n * `document.getElementsByTagName(\"perspective-viewer\")`.\n *\n * @module perspective-viewer\n */\n\nexport {IPerspectiveViewerPlugin} from \"./plugin\";\nexport {HTMLPerspectiveViewerPluginElement} from \"./plugin\";\nexport {HTMLPerspectiveViewerElement, PerspectiveViewerConfig} from \"./viewer\";\nexport * from \"./extensions\";\nexport * from \"./migrate\";\n\nimport \"./number-column-style\";\nimport \"./string-column-style\";\nimport \"./copy_menu\";\nimport \"./export_menu\";\nimport \"mobile-drag-drop-shadow-dom\";\n\nimport {HTMLPerspectiveViewerPluginElement} from \"./plugin\";\nimport {HTMLPerspectiveViewerElement} from \"./viewer\";\n\nexport default {\n    HTMLPerspectiveViewerElement,\n    HTMLPerspectiveViewerPluginElement,\n};\n"],
  "mappings": "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",
  "names": []
}
